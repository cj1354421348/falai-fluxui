name: docker-build-push

on:
  push:
    branches:
      - "master"
    tags:
      - 'v*'
  pull_request:
    branches:
      - "master"

# 明确定义权限，遵循最小权限原则
permissions:
  contents: read
  packages: write

env:
  REGISTRY: 'docker.io'
  IMAGE_NAME: mobaijun/generator
  NODE_VERSION: '18.20.4'

jobs:
  build:
    runs-on: ubuntu-latest
    # 对于 fork 的 PR 增加额外限制
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository

    steps:
      # 检出代码，限制历史深度以加快克隆速度
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      # 设置 Node.js 环境
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # 安装依赖
      - name: Install dependencies
        run: |
          if [ -f "yarn.lock" ]; then
            yarn install --frozen-lockfile
          else
            npm ci
          fi

      # 运行构建
      - name: Build project
        run: |
          if [ -f "yarn.lock" ]; then
            yarn build
          else
            npm run build
          fi

      # 运行测试
      - name: Run tests
        run: |
          if [ -f "yarn.lock" ]; then
            yarn test --passWithNoTests
          else
            npm test -- --passWithNoTests
          fi

      # 使用 Trivy 进行依赖扫描
      - name: Scan dependencies
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '0'
          severity: 'CRITICAL,HIGH'

      # 登录到 Docker Hub
      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # 设置 Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 提取 Docker 元数据
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}},event=tag
            type=semver,pattern={{major}}.{{minor}},event=tag
            type=sha,format=short,prefix=

      # 构建并推送 Docker 镜像
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NODE_VERSION=${{ env.NODE_VERSION }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            VCS_REF=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 构建后扫描镜像漏洞
      - name: Scan Docker image
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
          format: 'table'
          exit-code: '0'
          severity: 'CRITICAL,HIGH'